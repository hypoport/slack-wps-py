# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: slack-wps-py # NOTE: update this with your service name

plugins:
  - serverless-python-requirements

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

  stage: prod
  region: eu-central-1
  role: arn:aws:iam::458697064574:role/service-role/slack-wps-role

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:eu-central-1:458697064574:table/wpstatus"
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - '**/*'
  include:
    - 'wps/**/*.py'

custom:
  pythonRequirements:
    dockerizePip: true

functions:
  wps:
    handler: wps.handler.wps

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: wps
          method: post
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
    environment:
      kmsEncryptedSlackWpsToken: AQECAHiFsBBRz85HV/5Nbb0vV4mSgEFlW3qWxCQXdK2y0HZcgwAAAHYwdAYJKoZIhvcNAQcGoGcwZQIBADBgBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDGBEL//zKYs6JXx0vAIBEIAze4+GYdlZmLsXL7f3RFqzLSX3EG9iwCym8pLhbrT+8XcMmjo5Pyh7gcqmrEnJhtDXevPU
      kmsEncryptedSlackApiToken: AQECAHiFsBBRz85HV/5Nbb0vV4mSgEFlW3qWxCQXdK2y0HZcgwAAAK0wgaoGCSqGSIb3DQEHBqCBnDCBmQIBADCBkwYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAzBoTIoePLKZpyCQpoCARCAZsDePgZFyxv8ZozvJeQtlz5EpAV2SxcCrZF0aJ+d5Dj4auXPNRI7AdxzDOTV7EVjys49aRJoJW0h4uVn2kZ4Lq7aYxcAxv4qLX5FU+Jc4LObEtZcNngiMJ1jmaitQJ3k//MCkbH7Gg==

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
